pipeline {
    agent any

    options {
        //  Specifying how many artifacts and logs we want to persist. 
        //  In this case we are going to persist the last 10 builds.
        buildDiscarder(logRotator(numToKeepStr: '10'))
        // Disallows concurrent executions of the Pipeline.
        disableConcurrentBuilds()
        // Sets a timeout period for the Pipeline run, after which Jenkins should abort the Pipeline.
        // Our timeout is 1 hour. This is a good practice to prevent infinite blocks in our Jenkins.
        timeout(time: 1, unit: 'HOURS')
        // Prepends all console output generated by the Pipeline run with the time at which the line was emitted.
        timestamps()
    }

    tools {
        dockerTool 'docker-latest'
    }

    environment {
        N_G_ENDPOINT = 'https://a-comosus.com:3100/graphql/'
        G_ENDPOINT = 'https://a-comosus.com:3100/graphql/'
        IMAGE_VERSION = "${env.BUILD_ID}"
        AWS_ECR_REGION = 'ap-southeast-2'
    }



    
    stages {
        stage('Cleanup docker space') {
            steps {
                echo 'Cleanup docker space'
                sh 'docker system prune -f'
            }
        }

        stage('Git check out') {
            steps{
                echo 'Git check out...'
                // Get source code from a GitHub repository
                git branch: env.BRANCH_NAME, url:'https://github.com/A-Comosus/comosus-client.git'
            }
        }
        stage('Install dependencies') {
            steps {
                echo 'Install dependencies...'
                sh 'npm install'
            }
        }

        stage('Test') {
            steps {
                echo 'Testing..'
                sh 'npm run test:coverage'
            }
        }
        
        stage('Checking for linter error') {
            steps {
                echo 'Checking for linter error....'
                sh 'npm run lint'
            }
        }

        // stage ('Integrated Test') {
        //     steps {
        //         echo 'Integrated Test....'
        //         sh
        //     }
        // }

        stage('Build') {
            steps {
                echo 'Building....'
                sh 'npm run codegen'
                sh 'npm run build'
            }
        }

        // stage ('Container Integrated Test') {
        //     steps {
        //         echo 'Container Integrated Test....'
        //         sh
        //     }
        // }

        stage('Build and Upload Image to ECR') {
            
            when {
                anyOf {
                    branch 'develop'
                    branch 'CI-CD'
                }
            }

            steps {
                echo 'build image with ecr tage...'
                withCredentials([string(credentialsId: 'AWS_REPOSITORY_URL_SECRET', variable: 'AWS_ECR_URL')]) {
                    sh "docker build --build-arg N_G_ENDPOINT=${N_G_ENDPOINT} --build-arg G_ENDPOINT=${G_ENDPOINT} -t ${AWS_ECR_URL}:${IMAGE_VERSION} ."
                }

                echo 'upload to ECR'
                withCredentials([string(credentialsId: 'AWS_REPOSITORY_URL_SECRET', variable: 'AWS_ECR_URL')]) {
                    withAWS(region: "${AWS_ECR_REGION}", credentials: 'AWS_Credentials') {
                        script {
                            def login = ecrLogin()
                            sh('#!/bin/sh -e\n' + "${login}") // hide logging
                            docker.image("${AWS_ECR_URL}:${IMAGE_VERSION}").push()
                        }
                    }
                }
            }
        }

        stage('Deploy to EKS') {

            when {
                anyOf {
                    branch 'develop'
                    branch 'CI-CD'
                }
            }

            steps {
                echo 'Git check out terrafom repo...'
                // Get source code from a GitHub repository
                withCredentials([string(credentialsId: 'Terraform-repo-access', variable: 'terraform-access')]) {
                    git branch: 'master',credentialsId:${terraform-access} ,url:'git@github.com:A-Comosus/a-comosus-terraform.git'
                }

                echo 'Update EKS through terraform....'

                echo 'inital terraform'
                dir("kubernetes-config") {
                    sh 'terraform init'
                }
                /*
                echo 'terraform apply'
                withCredentials([string(credentialsId: 'AWS_REPOSITORY_URL_SECRET', variable: 'AWS_ECR_URL')]) {
                    withAWS(region: "${AWS_ECR_REGION}", credentials: '	eks-jenkins-update-account') {
                        dir("kubernetes-config") {
                           script { 
                              sh("terraform apply -var=\'frontend-image=${AWS_ECR_URL}:${IMAGE_VERSION}\' --auto-approve") 
                           }
                        }
                    }
                }
                */
            }
        }
    }

    post {
        always {
            withCredentials([string(credentialsId: 'AWS_REPOSITORY_URL_SECRET', variable: 'AWS_ECR_URL')]) {
                deleteDir()
            }
        }
    }
}